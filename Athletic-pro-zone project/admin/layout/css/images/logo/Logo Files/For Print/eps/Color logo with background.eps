%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2393 1012
%%HiResBoundingBox: 0 0 2392.0798 1011.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2392.0798 1011.12 re
W
q
[0.24 0 0 -0.24 0 1011.12] cm
q
0 0 9966.666 4211.6196 re
W*
q
[3.124467 0 0 3.124112 0.0058554 0] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
0 0 3189.8735 1348.10132 re
f
Q
q
[29.662659 0 0 29.65929 296.63245 296.59286] cm
/DeviceRGB {} CS
[0.9686 0.9686 0.9686] SC
/DeviceRGB {} cs
[0.9686 0.9686 0.9686] sc
10 0 m
86 0 l
86.163658 0 86.327209 0.004015 86.490669 0.012045 c
86.654137 0.020076 86.817307 0.032111 86.980171 0.048153 c
87.143036 0.064194 87.305412 0.084221 87.4673 0.108235 c
87.629189 0.132248 87.790382 0.160219 87.950897 0.192147 c
88.111412 0.224075 88.271042 0.259922 88.429794 0.299687 c
88.588554 0.339453 88.746239 0.383089 88.902847 0.430597 c
89.059456 0.478104 89.214806 0.529425 89.368896 0.584559 c
89.522987 0.639694 89.675629 0.698576 89.826828 0.761205 c
89.978027 0.823834 90.127602 0.890134 90.275543 0.960107 c
90.423492 1.03008 90.569633 1.10364 90.713966 1.180787 c
90.858299 1.257935 91.000648 1.338577 91.141014 1.422714 c
91.281387 1.50685 91.419617 1.59438 91.555695 1.685304 c
91.691765 1.776227 91.825531 1.870434 91.956985 1.967925 c
92.088432 2.065415 92.217415 2.166072 92.343933 2.269896 c
92.470436 2.373719 92.594322 2.480583 92.715584 2.590489 c
92.836845 2.700394 92.955338 2.813209 93.07106 2.928932 c
93.186783 3.044655 93.299599 3.163148 93.4095 3.28441 c
93.519402 3.405672 93.626274 3.529558 93.730103 3.656067 c
93.833916 3.782576 93.93457 3.911555 94.032066 4.043006 c
94.129555 4.174457 94.223763 4.308221 94.314682 4.444297 c
94.405602 4.580373 94.493134 4.718598 94.577271 4.858972 c
94.661407 4.999346 94.74205 5.141699 94.819206 5.286032 c
94.896347 5.430365 94.969902 5.576504 95.039871 5.724448 c
95.109848 5.872393 95.176155 6.021965 95.238785 6.173165 c
95.301414 6.324365 95.360298 6.47701 95.415436 6.631101 c
95.470558 6.785191 95.521881 6.940542 95.569389 7.097153 c
95.616898 7.253763 95.660538 7.411445 95.700294 7.570198 c
95.740059 7.72895 95.775909 7.888583 95.807838 8.049096 c
95.839767 8.209609 95.867737 8.370809 95.891747 8.532695 c
95.915756 8.694581 95.935791 8.856959 95.951843 9.019829 c
95.967888 9.182698 95.979919 9.345862 95.987953 9.509323 c
95.995987 9.672784 96 9.836343 96 10 c
96 112 l
96 112.163658 95.995987 112.327217 95.987953 112.490677 c
95.979919 112.654137 95.967888 112.817307 95.951843 112.980179 c
95.935791 113.143044 95.915756 113.30542 95.891739 113.4673 c
95.867729 113.629189 95.83976 113.790382 95.807831 113.95089 c
95.775902 114.111397 95.740059 114.271027 95.700294 114.429787 c
95.660538 114.588539 95.616905 114.746223 95.569397 114.902832 c
95.521889 115.059441 95.470566 115.21479 95.415436 115.368881 c
95.360298 115.522972 95.301414 115.675613 95.238785 115.826813 c
95.176155 115.978012 95.109848 116.127586 95.039879 116.275536 c
94.96991 116.423477 94.896347 116.569618 94.819206 116.713951 c
94.74205 116.858284 94.661407 117.000641 94.577271 117.141014 c
94.493134 117.28138 94.405602 117.419601 94.314682 117.555679 c
94.223763 117.691757 94.129555 117.825523 94.032066 117.956978 c
93.93457 118.088425 93.833916 118.217407 93.730103 118.343925 c
93.626274 118.470436 93.519402 118.594322 93.409492 118.715584 c
93.299591 118.836838 93.186783 118.95533 93.07106 119.07106 c
92.955338 119.186783 92.836845 119.299599 92.715584 119.4095 c
92.594322 119.519409 92.470436 119.626282 92.343925 119.73011 c
92.217415 119.833923 92.088432 119.934578 91.956985 120.032074 c
91.825531 120.129555 91.691765 120.223763 91.555695 120.31469 c
91.419617 120.405609 91.281395 120.493134 91.141022 120.577278 c
91.000648 120.661415 90.858299 120.742058 90.713974 120.819214 c
90.569633 120.896355 90.423492 120.96991 90.275543 121.039879 c
90.127602 121.109856 89.978027 121.176155 89.826828 121.238785 c
89.675629 121.301414 89.52298 121.360298 89.368889 121.415428 c
89.214798 121.470566 89.059448 121.521896 88.90284 121.569405 c
88.746231 121.616905 88.588547 121.660538 88.429794 121.70031 c
88.271042 121.740067 88.111412 121.775917 87.950897 121.807846 c
87.790382 121.839775 87.629189 121.867744 87.4673 121.891762 c
87.305412 121.915779 87.143036 121.935806 86.980171 121.951851 c
86.817307 121.967888 86.654137 121.979919 86.490677 121.987946 c
86.327217 121.995979 86.163658 121.999992 86 122 c
10 122 l
9.836343 121.999992 9.672784 121.995979 9.509323 121.987946 c
9.345862 121.979919 9.182698 121.967888 9.019829 121.951851 c
8.856959 121.935806 8.694581 121.915779 8.532695 121.891762 c
8.370809 121.867744 8.209609 121.839767 8.049096 121.807838 c
7.888583 121.775909 7.72895 121.740059 7.570198 121.700302 c
7.411445 121.660538 7.253763 121.616905 7.097153 121.569405 c
6.940542 121.521896 6.785191 121.470573 6.6311 121.415436 c
6.47701 121.360298 6.324365 121.301414 6.173165 121.238785 c
6.021965 121.176155 5.872393 121.109856 5.724448 121.039886 c
5.576504 120.96991 5.430366 120.896355 5.286033 120.819214 c
5.141699 120.742058 4.999346 120.661415 4.858972 120.577278 c
4.718598 120.493134 4.580373 120.405609 4.444297 120.31469 c
4.308221 120.223763 4.174457 120.129555 4.043006 120.032066 c
3.911555 119.934578 3.782576 119.833923 3.656067 119.73011 c
3.529558 119.626282 3.405672 119.519409 3.28441 119.4095 c
3.163148 119.299599 3.044655 119.186783 2.928932 119.07106 c
2.813209 118.95533 2.700394 118.836838 2.590489 118.715584 c
2.480583 118.59433 2.373719 118.470444 2.269896 118.343933 c
2.166072 118.217415 2.065415 118.088432 1.967925 117.956978 c
1.870434 117.825523 1.776227 117.691757 1.685304 117.555687 c
1.594381 117.419609 1.50685 117.281387 1.422714 117.141014 c
1.338577 117.000641 1.257935 116.858284 1.180787 116.713959 c
1.10364 116.569618 1.03008 116.423477 0.960107 116.275536 c
0.890134 116.127594 0.823834 115.97802 0.761205 115.82682 c
0.698576 115.675621 0.639694 115.52298 0.584559 115.368889 c
0.529425 115.214798 0.478104 115.059448 0.430597 114.90284 c
0.383089 114.746231 0.339453 114.588547 0.299687 114.429794 c
0.259922 114.271034 0.224075 114.111404 0.192147 113.95089 c
0.160219 113.790382 0.132248 113.629189 0.108235 113.467308 c
0.084221 113.30542 0.064194 113.143044 0.048153 112.980179 c
0.032111 112.817307 0.020076 112.654137 0.012045 112.490677 c
0.004015 112.327217 0 112.163658 0 112 c
0 10 l
0 9.836343 0.004015 9.672784 0.012045 9.509323 c
0.020076 9.345862 0.032111 9.182698 0.048153 9.019829 c
0.064194 8.856959 0.084221 8.694581 0.108235 8.532695 c
0.132248 8.370809 0.160219 8.209609 0.192147 8.049096 c
0.224075 7.888583 0.259922 7.72895 0.299687 7.570198 c
0.339453 7.411445 0.383089 7.253763 0.430597 7.097153 c
0.478104 6.940542 0.529425 6.785191 0.584559 6.6311 c
0.639694 6.47701 0.698576 6.324365 0.761205 6.173165 c
0.823834 6.021965 0.890134 5.872393 0.960107 5.724448 c
1.03008 5.576504 1.10364 5.430366 1.180787 5.286033 c
1.257935 5.141699 1.338577 4.999346 1.422714 4.858972 c
1.50685 4.718598 1.59438 4.580373 1.685304 4.444297 c
1.776227 4.308221 1.870434 4.174457 1.967925 4.043006 c
2.065415 3.911555 2.166072 3.782576 2.269896 3.656067 c
2.373719 3.529558 2.480583 3.405672 2.590489 3.28441 c
2.700394 3.163148 2.813209 3.044655 2.928932 2.928932 c
3.044655 2.813209 3.163148 2.700394 3.28441 2.590489 c
3.405672 2.480583 3.529558 2.373719 3.656067 2.269896 c
3.782576 2.166072 3.911555 2.065415 4.043006 1.967925 c
4.174457 1.870434 4.308221 1.776227 4.444297 1.685304 c
4.580373 1.594381 4.718598 1.50685 4.858972 1.422714 c
4.999346 1.338577 5.141699 1.257935 5.286032 1.180787 c
5.430365 1.10364 5.576504 1.03008 5.724448 0.960107 c
5.872393 0.890134 6.021965 0.823834 6.173165 0.761205 c
6.324365 0.698576 6.47701 0.639694 6.631101 0.584559 c
6.785191 0.529425 6.940542 0.478104 7.097153 0.430597 c
7.253763 0.383089 7.411445 0.339453 7.570198 0.299687 c
7.72895 0.259922 7.888583 0.224075 8.049096 0.192147 c
8.209609 0.160219 8.370809 0.132248 8.532695 0.108235 c
8.694581 0.084221 8.856959 0.064194 9.019829 0.048153 c
9.182698 0.032111 9.345862 0.020076 9.509323 0.012045 c
9.672784 0.004015 9.836343 0 10 0 c
h
f
Q
q
[63.010303 0 0 63.003139 793.40436 -300.01086] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
8.886 53.264999 m
8.0412 53.264999 7.3566 52.579201 7.3566 51.734398 c
7.3566 25.126398 l
7.3566 24.282799 7.67822 23.725399 8.4084 23.302998 c
19.485399 16.900398 l
20.2162 16.477999 20.859999 16.477999 21.590799 16.900398 c
26.8419 19.935799 l
27.5721 20.358198 27.8937 20.915598 27.8937 21.759199 c
27.8937 51.7342 l
27.8937 52.578999 27.2085 53.264198 26.363699 53.264198 c
25.518898 53.264198 24.833698 52.578999 24.833698 51.7342 c
24.833698 22.3092 l
20.537699 19.8258 l
10.416699 25.676399 l
10.416699 51.733398 l
10.416699 52.578197 9.731499 53.263397 8.886699 53.263397 c
8.886 53.264999 l
h
8.8866 59.999413 m
8.59861 59.999413 8.3292 59.921364 8.0988 59.782791 c
2.583 56.594391 l
1.8528 56.171989 1.5312 55.61459 1.5312 54.770992 c
1.5312 21.760994 l
1.5312 20.917395 1.85282 20.359993 2.583 19.937593 c
8.0988 16.749193 l
8.329189 16.610613 8.59861 16.530813 8.8866 16.530813 c
9.731399 16.530813 10.416599 17.216013 10.416599 18.060814 c
10.416599 18.636793 10.09802 19.138414 9.627659 19.399414 c
4.590659 22.310614 l
4.590659 54.219612 l
9.627659 57.130814 l
10.098049 57.391792 10.416599 57.893414 10.416599 58.469414 c
10.416599 59.314213 9.731399 59.999413 8.8866 59.999413 c
h
14.713 60.001171 m
13.8682 60.001171 13.1836 59.315311 13.1836 58.47047 c
13.1836 41.965469 l
13.1836 41.121868 13.50522 40.564468 14.2354 40.142071 c
19.7668 36.940472 l
20.007971 36.80125 20.27076 36.735283 20.53054 36.735283 c
21.05912 36.735283 21.573341 37.009502 21.856541 37.500282 c
21.99576 37.741451 22.061731 38.004242 22.061731 38.264023 c
22.068939 55.103024 l
22.068939 55.947823 21.383739 56.633022 20.538939 56.633022 c
19.694138 56.633022 19.008938 55.947823 19.008938 55.103024 c
19.008938 40.917023 l
16.242937 42.516022 l
16.242937 58.471024 l
16.242937 59.315823 15.557737 60.001022 14.712937 60.001022 c
14.713 60.001171 l
h
14.713 36.428001 m
13.8682 36.428001 13.1836 35.742142 13.1836 34.897301 c
13.1836 28.494701 l
13.1836 27.651102 13.505811 27.094301 14.236 26.671301 c
19.767399 23.4697 l
20.00857 23.330481 20.271358 23.264509 20.531139 23.264509 c
21.059719 23.264509 21.57394 23.538729 21.85714 24.029509 c
21.996359 24.270679 22.06233 24.533468 22.06233 24.793249 c
22.069538 31.530048 l
22.069538 32.374847 21.383738 33.060047 20.538939 33.060047 c
19.694139 33.060047 19.008938 32.374847 19.008938 31.530046 c
19.008938 27.446445 l
16.242937 29.045444 l
16.242937 34.897842 l
16.242937 35.742641 15.557737 36.427841 14.712937 36.427841 c
14.713 36.428001 l
h
f
Q
q
[23.126972 0 0 23.124346 3691.2471 1247.90088] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
2 40 m
2 23.200001 l
2 12.040001 2 7.64 8 7.64 c
14 7.64 14 12.040001 14 23.200001 c
14 40 l
10 40 l
10 30.799999 l
6 30.799999 l
6 40 l
2 40 l
h
6 27.6 m
10 27.6 l
10 23.200001 l
10 12.800001 10 10.840001 8 10.840001 c
6 10.840001 6 12.800001 6 23.200001 c
6 27.6 l
h
18.4 11.6 m
18.4 8 l
30.4 8 l
30.4 11.6 l
26.4 11.6 l
26.4 40 l
22.4 40 l
22.4 11.6 l
18.4 11.6 l
h
34.799999 40 m
34.799999 8 l
38.799999 8 l
38.799999 21.6 l
42.799999 21.6 l
42.799999 8 l
46.799999 8 l
46.799999 40 l
42.799999 40 l
42.799999 24.799999 l
38.799999 24.799999 l
38.799999 40 l
34.799999 40 l
h
52.799999 40 m
52.799999 8 l
56.799999 8 l
56.799999 36 l
62 36 l
62 40 l
52.799999 40 l
h
66.400002 40 m
66.400002 8 l
75.599998 8 l
75.599998 11.2 l
70.400002 11.2 l
70.400002 21.599998 l
74.800003 21.599998 l
74.800003 24.799999 l
70.400002 24.799999 l
70.400002 36 l
75.599998 36 l
75.599998 40 l
66.400002 40 l
h
78.800003 11.6 m
78.800003 8 l
90.800003 8 l
90.800003 11.6 l
86.800003 11.6 l
86.800003 40 l
82.800003 40 l
82.800003 11.6 l
78.800003 11.6 l
h
95.199997 40 m
95.199997 8 l
99.199997 8 l
99.199997 40 l
95.199997 40 l
h
104.800003 23.16 m
104.800003 12 104.800003 7.599999 110.400002 7.599999 c
114.520004 7.599999 115.639999 10.119999 115.919998 16.16 c
112.199997 16.16 l
112.039993 11.799999 111.599998 10.799999 110.399994 10.799999 c
108.559998 10.799999 108.559998 12.759999 108.559998 23.16 c
108.559998 34.720001 108.559998 36.400002 110.399994 36.400002 c
111.719994 36.400002 112.119995 35.400002 112.199997 30.240002 c
115.959999 30.240002 l
115.720001 37.640003 114.720001 40.400002 110.400002 40.400002 c
104.800003 40.400002 104.800003 35.960003 104.800003 23.160002 c
104.800003 23.16 l
h
131.559998 40 m
131.559998 8 l
138.039993 8 l
142.159988 8 143.23999 10.520001 143.559998 16.560001 c
143.559998 17.840002 l
143.23999 23.880001 142.160004 26.400002 138.039993 26.400002 c
135.559998 26.400002 l
135.559998 40 l
131.559998 40 l
h
135.559998 23.200001 m
138.039993 23.200001 l
139.23999 23.200001 139.679993 22.200001 139.839996 17.84 c
139.839996 16.56 l
139.679993 12.199999 139.23999 11.199999 138.039993 11.199999 c
135.559998 11.199999 l
135.559998 23.199999 l
135.559998 23.200001 l
h
148.360001 40 m
148.360001 8 l
154.839996 8 l
158.959991 8 160.360001 10.520001 160.360001 15.360001 c
160.360001 19.720001 159.839996 22.200001 158.600006 23.400002 c
158.600006 23.640001 l
159.639999 24.000002 159.960007 25.880001 160.360001 30.560001 c
161.160004 40 l
157.160004 40 l
156.639999 30.560001 l
156.360001 25.800001 155.639999 24.800001 154.440002 24.800001 c
152.360001 24.800001 l
152.360001 40 l
148.360001 40 l
h
152.360001 21.6 m
154.839996 21.6 l
156.23999 21.6 156.639999 20.200001 156.639999 15.360001 c
156.639999 12.200001 156.039993 11.200001 154.839996 11.200001 c
152.360001 11.200001 l
152.360001 21.6 l
h
165.960007 23.16 m
165.960007 12 166.200012 7.599999 172.20001 7.599999 c
178.20001 7.599999 178.44002 12 178.44002 23.16 c
178.44002 35.959999 178.20001 40.400002 172.20001 40.400002 c
166.200012 40.400002 165.960007 35.960003 165.960007 23.160002 c
165.960007 23.16 l
h
169.96001 23.16 m
169.96001 34.720001 169.96001 36.400002 172.20001 36.400002 c
174.44002 36.400002 174.44002 34.720001 174.44002 23.160002 c
174.44002 12.760002 174.44002 10.800002 172.20001 10.800002 c
169.96001 10.800002 169.96001 12.760002 169.96001 23.160002 c
169.96001 23.16 l
h
184.03999 26.4 m
184.03999 23.199999 l
192.03999 23.199999 l
192.03999 26.4 l
184.03999 26.4 l
h
196.44 40 m
203.64 11.200001 l
197.24001 11.200001 l
197.24001 8.000001 l
208.44 8.000001 l
201.44 36 l
207.64 36 l
207.64 40 l
196.44 40 l
h
212.44 23.16 m
212.44 12 212.68001 7.599999 218.68001 7.599999 c
224.68001 7.599999 224.92001 12 224.92001 23.16 c
224.92001 35.959999 224.68001 40.400002 218.68001 40.400002 c
212.68001 40.400002 212.44 35.960003 212.44 23.160002 c
212.44 23.16 l
h
216.44 23.16 m
216.44 34.720001 216.44 36.400002 218.68001 36.400002 c
220.92001 36.400002 220.92001 34.720001 220.92001 23.160002 c
220.92001 12.760002 220.92001 10.800002 218.68001 10.800002 c
216.44 10.800002 216.44 12.760002 216.44 23.160002 c
216.44 23.16 l
h
230.52 40 m
230.52 8 l
234.12001 8 l
239.36002 27.6 l
239.32002 27.200001 l
239.32002 8 l
243.32002 8 l
243.32002 40 l
239.72002 40 l
234.48001 22.4 l
234.52 22.799999 l
234.52 40 l
230.52 40 l
h
249.32001 40 m
249.32001 8 l
258.52002 8 l
258.52002 11.2 l
253.32002 11.2 l
253.32002 21.599998 l
257.72003 21.599998 l
257.72003 24.799999 l
253.32004 24.799999 l
253.32004 36 l
258.52005 36 l
258.52005 40 l
249.32005 40 l
249.32001 40 l
h
f
Q
q
[21.572851 0 0 21.5704 4315.3447 2457.1047] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
7.2286 11.2 m
5.2857 14.7714 l
0.7143 7.4285 l
0.7143 5.7142 l
4 5.7142 l
7.2286 11.2 l
h
10.857 5.714 m
14.1427 5.714 l
14.1427 7.4283 l
9.285601 15.2854 l
9.285601 19.999701 l
5.599901 19.999701 l
5.599901 15.256801 l
10.857 5.714 l
h
24.714329 20 m
23.142929 20 l
21.000029 17.8571 l
21.000029 7.857099 l
23.142929 5.714199 l
24.714329 5.714199 l
24.714329 20.0002 l
24.714329 20 l
h
31.428429 5.714 m
33.571327 7.8569 l
33.571327 17.856899 l
31.428427 19.9998 l
25.285526 19.9998 l
25.285526 16.856899 l
29.856926 16.856899 l
29.856926 8.856899 l
25.285526 8.856899 l
25.285526 5.713999 l
31.428427 5.713999 l
31.428429 5.714 l
h
44.857185 20 m
43.285786 20 l
41.142887 17.8571 l
41.142887 5.7141 l
44.857185 5.7141 l
44.857185 20.000099 l
44.857185 20 l
h
50.000286 5.714 m
53.714584 5.714 l
53.714584 17.856998 l
51.571686 19.999899 l
45.428787 19.999899 l
45.428787 16.856998 l
50.000187 16.856998 l
50.000187 5.713999 l
50.000286 5.714 l
h
65.000046 20 m
61.285748 20 l
61.285748 5.714 l
65.000046 5.714 l
65.000046 20 l
h
74.143143 7.857 m
74.143143 12.857 l
72.000244 14.999901 l
74.143143 18.285601 l
74.143143 19.999901 l
70.714546 19.999901 l
67.743149 15.142801 l
65.571747 15.142801 l
65.571747 11.999901 l
70.428848 11.999901 l
70.428848 8.857 l
65.571747 8.857 l
65.571747 5.7141 l
72.000343 5.7141 l
74.143143 7.857 l
h
97.285759 20 m
95.714355 20 l
93.571457 17.8571 l
93.571457 7.857099 l
95.714355 5.714199 l
97.285759 5.714199 l
97.285759 20.0002 l
97.285759 20 l
h
104.285858 5.714 m
106.428757 7.8569 l
106.428757 9.9998 l
103.714455 9.9998 l
102.571556 8.856899 l
97.857254 8.856899 l
97.857254 5.713999 l
104.285851 5.713999 l
104.285858 5.714 l
h
99.428558 14.4286 m
99.428558 11.2857 l
106.428558 11.2857 l
106.428558 17.8571 l
104.28566 20 l
97.857063 20 l
97.857063 16.8571 l
102.714165 16.8571 l
102.714165 14.428499 l
99.428467 14.428499 l
99.428558 14.4286 l
h
119.800026 11.2 m
117.857124 14.7714 l
113.285721 7.4285 l
113.285721 5.7142 l
116.571419 5.7142 l
119.800026 11.2 l
h
123.428429 5.714 m
126.714127 5.714 l
126.714127 7.4283 l
121.857025 15.2854 l
121.857025 19.999701 l
118.171326 19.999701 l
118.171326 15.256801 l
123.428429 5.714 l
h
144.142853 5.714 m
147.857147 5.714 l
147.857147 20 l
144.142853 20 l
144.142853 12 l
141.628555 16.8571 l
139.771454 16.8571 l
134.057159 5.7141 l
137.285767 5.7141 l
140.714371 12.199801 l
144.142853 5.714 l
h
133.571457 6 m
137.285751 13.2571 l
137.285751 20 l
133.571457 20 l
133.571457 6 l
h
171.00005 20 m
167.285751 20 l
167.285751 5.714 l
171.00005 5.714 l
171.00005 20 l
h
180.14314 7.857 m
180.14314 11.3427 l
178.62885 12.857 l
180.14314 14.371301 l
180.14314 17.857 l
178.00024 19.999901 l
171.57164 19.999901 l
171.57164 16.857 l
176.42874 16.857 l
176.42874 14.4284 l
171.57164 14.4284 l
171.57164 11.2855 l
176.42874 11.2855 l
176.42874 8.856899 l
171.57164 8.856899 l
171.57164 5.713999 l
178.00024 5.713999 l
180.14314 7.857 l
h
191.42862 20 m
187.71432 20 l
187.71432 5.714 l
191.42862 5.714 l
191.42862 20 l
h
200.57172 7.857 m
200.57172 12.857 l
198.42882 14.999901 l
200.57172 18.285601 l
200.57172 19.999901 l
197.14311 19.999901 l
194.17171 15.142801 l
192.00031 15.142801 l
192.00031 11.999901 l
196.85741 11.999901 l
196.85741 8.857 l
192.00031 8.857 l
192.00031 5.7141 l
198.42891 5.7141 l
200.57172 7.857 l
h
211.85719 20 m
210.2858 20 l
208.1429 17.8571 l
208.1429 7.857099 l
210.2858 5.714199 l
211.85719 5.714199 l
211.85719 20.0002 l
211.85719 20 l
h
218.57129 5.714 m
220.71419 7.8569 l
220.71419 17.856899 l
218.57129 19.9998 l
212.42839 19.9998 l
212.42839 16.856899 l
216.99979 16.856899 l
216.99979 8.856899 l
212.42839 8.856899 l
212.42839 5.713999 l
218.57129 5.713999 l
218.57129 5.714 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
